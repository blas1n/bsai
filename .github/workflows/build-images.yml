name: Build Container Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  DEV_IMAGE_NAME: ${{ github.repository }}/dev
  PROD_IMAGE_NAME: ${{ github.repository }}/prod

jobs:
  build-dev-image:
    name: Build Development Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      dev-image: ${{ steps.meta.outputs.tags }}
      dev-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.DEV_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push development image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .devcontainer/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false  # Disable for multi-platform builds

  build-prod-image:
    name: Build Production Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      prod-image: ${{ steps.meta.outputs.tags }}
      prod-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROD_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push production image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.prod
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

  security-scan-images:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: [build-dev-image, build-prod-image]
    if: always() && (needs.build-dev-image.result == 'success' || needs.build-prod-image.result == 'success')
    
    strategy:
      matrix:
        image-type: [dev, prod]
        include:
          - image-type: dev
            image: ${{ needs.build-dev-image.outputs.dev-image }}
            condition: ${{ needs.build-dev-image.result == 'success' }}
          - image-type: prod
            image: ${{ needs.build-prod-image.outputs.prod-image }}
            condition: ${{ needs.build-prod-image.result == 'success' }}
    
    steps:
    - name: Run Trivy vulnerability scanner
      if: matrix.condition
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.image-type }}.sarif'
    
    - name: Upload Trivy scan results
      if: matrix.condition
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.image-type }}.sarif'